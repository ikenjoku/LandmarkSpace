{"version":3,"sources":["../../server/routes/postsRouter.js"],"names":["express","require","bodyParser","postsRouter","Router","use","json","mongoose","Posts","route","get","req","res","next","find","then","posts","err","catch","post","create","body","console","log","statusCode","put","end","delete","remove","response","findById","params","postId","findByIdAndUpdate","$set","new","findByIdAndRemove","setHeader","comments","Error","status","push","save","i","length","id","dish","_id","commentId","rating","comment","module","exports"],"mappings":"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","file":"postsRouter.js","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst postsRouter = express.Router();\r\npostsRouter.use(bodyParser.json());\r\n\r\nconst mongoose = require('mongoose');\r\nconst Posts = require('../models/Posts');\r\n\r\npostsRouter.route('/')\r\n    .get((req, res, next) => {\r\n        Posts.find({})\r\n            .then((posts) => {\r\n                res.json(posts)\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .post((req, res, next) => {\r\n        Posts.create(req.body)\r\n            .then((post) => {\r\n                console.log('Post Created', post);\r\n                res.statusCode = 201;\r\n                res.json(post)\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .put((req, res, next) => {\r\n        res.statusCode = 403;\r\n        res.end('PUT operation not supported');\r\n    })\r\n    .delete((req, res, next) => {\r\n        Posts.remove({})\r\n            .then((response) => {\r\n                res.statusCode = 203;\r\n                res.json(response)\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    });\r\n\r\npostsRouter.route('/:postId')\r\n    .get((req, res, next) => {\r\n        Posts.findById(req.params.postId)\r\n            .then((post) => {\r\n                res.json(post)\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .post((req, res, next) => {\r\n        res.end('POST operation not supported');\r\n    })\r\n    .put((req, res, next) => {\r\n        Posts.findByIdAndUpdate(req.params.postId, {\r\n                $set: req.body\r\n            }, { new: true })\r\n            .then((post) => {\r\n                res.json(post)\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .delete((req, res, next) => {\r\n        Posts.findByIdAndRemove(req.params.postId)\r\n            .then((response) => {\r\n                res.statusCode = 203;\r\n                res.json(response)\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    });\r\n\r\npostsRouter.route('/:postId/comments')\r\n    .get((req, res, next) => {\r\n        Posts.findById(req.params.postId)\r\n            .then((post) => {\r\n                if (post !== null) {\r\n                    res.statusCode = 200;\r\n                    res.setHeader('Content-Type', 'application/json');\r\n                    res.json(post.comments);\r\n                } else {\r\n                    err = new Error(`Post ${req.params.postId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                }\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .post((req, res, next) => {\r\n        Posts.findById(req.params.postId)\r\n            .then((post) => {\r\n                if (post !== null) {\r\n                    post.comments.push(req.body);\r\n                    post.save()\r\n                        .then((post) => {\r\n                            res.statusCode = 200;\r\n                            res.setHeader('Content-Type', 'application/json');\r\n                            res.json(post);\r\n                        }, (err) => next(err));\r\n                } else {\r\n                    err = new Error(`Post ${req.params.postId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                }\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .put((req, res, next) => {\r\n        res.statusCode = 403;\r\n        res.end('PUT operation not supported on /posts/' + req.params.postId + '/comments');\r\n    })\r\n    .delete((req, res, next) => {\r\n        Posts.findById(req.params.postId)\r\n            .then((post) => {\r\n                if (post !== null) {\r\n                    for (let i = (post.comments.length - 1); i >= 0; i--) {\r\n                        post.comments.id(dish.comments[i]._id).remove();\r\n                    }\r\n                    post.save()\r\n                        .then((post) => {\r\n                            res.statusCode = 200;\r\n                            res.setHeader('Content-Type', 'application/json');\r\n                            res.json(post);\r\n                        }, (err) => next(err));\r\n                } else {\r\n                    err = new Error(`Post ${req.params.postId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                }\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    });\r\n\r\npostsRouter.route('/:postId/comments/:commentId')\r\n    .get((req, res, next) => {\r\n        Posts.findById(req.params.postId)\r\n            .then((post) => {\r\n                if (post !== null && post.comments.id(req.params.commentId) !== null) {\r\n                    res.statusCode = 200;\r\n                    res.setHeader('Content-Type', 'application/json');\r\n                    res.json(post.comments.id(req.params.commentId));\r\n                } else if (post == null) {\r\n                    err = new Error(`Post ${req.params.postId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                } else {\r\n                    err = new Error(`Comment ${req.params.commentId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                }\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .post((req, res, next) => {\r\n        res.status(403).json({ \"message\": \"POST operation not supported on /posts/\" + req.params.postId + \"/comments/\" + req.params.commentId });\r\n    })\r\n    .put((req, res, next) => {\r\n        Posts.findById(req.params.postId)\r\n            .then((post) => {\r\n                if (post !== null && post.comments.id(req.params.commentId) !== null) {\r\n                    if (req.body.rating) {\r\n                        post.comments.id(req.params.commentId).rating = req.body.rating;\r\n                    }\r\n                    if (req.body.comment) {\r\n                        post.comments.id(req.params.commentId).comment = req.body.comment;\r\n                    }\r\n                    post.save()\r\n                        .then((post) => {\r\n                            res.statusCode = 200;\r\n                            res.setHeader('Content-Type', 'application/json');\r\n                            res.json(post);\r\n                        }, (err) => next(err));\r\n                } else if (post == null) {\r\n                    err = new Error(`Post ${req.params.postId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                } else {\r\n                    err = new Error(`Comment ${req.params.commentId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                }\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    })\r\n    .delete((req, res, next) => {\r\n        Posts.findById(req.params.postId)\r\n            .then((post) => {\r\n                if (post !== null && post.comments.id(req.params.commentId) !== null) {\r\n                    post.comments.id(req.params.commentId).remove();\r\n                    post.save()\r\n                        .then((post) => {\r\n                            res.statusCode = 200;\r\n                            res.setHeader('Content-Type', 'application/json');\r\n                            res.json(post);\r\n                        }, (err) => next(err));\r\n                } else if (post == null) {\r\n                    err = new Error(`Post ${req.params.postId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                } else {\r\n                    err = new Error(`Comment ${req.params.commentId} not found!`);\r\n                    err.status = 404;\r\n                    return next(err);\r\n                }\r\n            }, (err) => next(err))\r\n            .catch((err) => next(err));\r\n    });\r\n\r\n\r\nmodule.exports = postsRouter;"]}