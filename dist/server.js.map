{"version":3,"sources":["../server/server.js"],"names":["app","path","require","logger","errorhandler","PORT","process","env","bodyParser","keys","install","adsRouter","postsRouter","buzzesRouter","eventsRouter","use","json","mongoose","Promise","global","connect","mongoURI","static","join","err","req","res","next","status","console","log","message","send","then","db","listen"],"mappings":";;AAAA;;;;AASA;;AACA;;;;;;AATA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,eAAeF,QAAQ,cAAR,CAArB;AACA,IAAMG,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AACA,IAAMG,aAAaN,QAAQ,aAAR,CAAnB;AACA,IAAMO,OAAOP,QAAQ,eAAR,CAAb;;AAIA,2BAAiBQ,OAAjB;;AAEA,IAAMC,YAAYT,QAAQ,oBAAR,CAAlB;AACA,IAAMU,cAAcV,QAAQ,sBAAR,CAApB;AACA,IAAMW,eAAeX,QAAQ,uBAAR,CAArB;AACA,IAAMY,eAAeZ,QAAQ,uBAAR,CAArB;;AAEAF,IAAIe,GAAJ,CAAQZ,OAAO,KAAP,CAAR;AACAH,IAAIe,GAAJ,CAAQP,WAAWQ,IAAX,EAAR;;AAEA,IAAMC,WAAWf,QAAQ,UAAR,CAAjB;AACAe,SAASC,OAAT,GAAmBC,OAAOD,OAA1B;AACA,IAAME,UAAUH,SAASG,OAAT,CAAiBX,KAAKY,QAAtB,CAAhB;;AAEArB,IAAIe,GAAJ,CAAQ,aAAR,EAAuBJ,SAAvB;AACAX,IAAIe,GAAJ,CAAQ,eAAR,EAAyBH,WAAzB;AACAZ,IAAIe,GAAJ,CAAQ,gBAAR,EAA0BD,YAA1B;AACAd,IAAIe,GAAJ,CAAQ,gBAAR,EAA0BF,YAA1B;AACAb,IAAIe,GAAJ,CAAQ,kBAAQO,MAAR,CAAerB,KAAKsB,IAAL,CAAU,QAAV,EAAoB,QAApB,CAAf,CAAR;;AAEAvB,IAAIe,GAAJ,CAAQ,UAACS,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7B,QAAMC,SAASJ,IAAII,MAAJ,IAAc,GAA7B;AACAC,YAAQC,GAAR,CAAYN,IAAIO,OAAhB;AACAL,QAAIE,MAAJ,CAAWA,MAAX,EAAmBI,IAAnB,CAAwBR,IAAIO,OAA5B;AACH,CAJD;;AAMAX,QAAQa,IAAR,CAAa,UAACC,EAAD,EAAQ;AACjBL,YAAQC,GAAR,CAAY,+BAAZ;AACA9B,QAAImC,MAAJ,CAAW9B,IAAX,EAAiB,YAAM;AACnBwB,gBAAQC,GAAR,kCAA2CzB,IAA3C;AACH,KAFD;AAGH,CALD,EAKG,UAACmB,GAAD,EAAS;AAAEK,YAAQC,GAAR,CAAYN,GAAZ;AAAmB,CALjC","file":"server.js","sourcesContent":["import express from 'express';\r\nconst app = express()\r\nconst path = require('path');\r\nconst logger = require('morgan');\r\nconst errorhandler = require('errorhandler');\r\nconst PORT = process.env.PORT || 4500;\r\nconst bodyParser = require('body-parser');\r\nconst keys = require('./config/keys');\r\n\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\n\r\nconst adsRouter = require('./routes/adsRouter');\r\nconst postsRouter = require('./routes/postsRouter');\r\nconst buzzesRouter = require('./routes/buzzesRouter')\r\nconst eventsRouter = require('./routes/eventsRouter');\r\n\r\napp.use(logger('dev'));\r\napp.use(bodyParser.json());\r\n\r\nconst mongoose = require('mongoose');\r\nmongoose.Promise = global.Promise;\r\nconst connect = mongoose.connect(keys.mongoURI);\r\n\r\napp.use('/api/v1/ads', adsRouter);\r\napp.use('/api/v1/posts', postsRouter);\r\napp.use('/api/v1/events', eventsRouter);\r\napp.use('/api/v1/buzzes', buzzesRouter);\r\napp.use(express.static(path.join('client', 'public')));\r\n\r\napp.use((err, req, res, next) => {\r\n    const status = err.status || 500;\r\n    console.log(err.message);\r\n    res.status(status).send(err.message);\r\n});\r\n\r\nconnect.then((db) => {\r\n    console.log('Connected freshly to MongoDB!');\r\n    app.listen(PORT, () => {\r\n        console.log(`Server is up and running at ${PORT}`);\r\n    });\r\n}, (err) => { console.log(err); });"]}